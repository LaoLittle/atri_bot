name: Build

on:
  push:
    branches: [ master ]

jobs:
  test-and-build:
    strategy:
      fail-fast: false
      matrix:
        target:
          - { name: Linux-x64, os: ubuntu-latest, tool: x86_64-unknown-linux-musl }
          - { name: macOS-x64, os: macos-latest, tool: x86_64-apple-darwin }
          - { name: Windows-x64, os: windows-2022, tool: x86_64-pc-windows-msvc }

    name: Build-${{ matrix.target.name }}
    runs-on: ${{ matrix.target.os }}

    env:
      CI: 1
      CARGO_INCREMENTAL: 0
      windows: ${{ startsWith(matrix.target.name, 'Windows') }}
      linux: ${{ startsWith(matrix.target.name, 'Linux') }}

    steps:
      - uses: actions/checkout@v3

      - if: ${{ endsWith(matrix.target.tool, 'musl') }}
        run: sudo apt install -y musl-tools musl-dev

      - name: Set rust toolchain
        run: rustup default nightly

      - name: Test
        run: cargo test

      - name: Build
        run: cargo build --release --target ${{ matrix.target.tool }}

      - name: Upload
        if: env.windows != 'true'
        uses: actions/upload-artifact@v3
        with:
          name: atri_qq-${{ matrix.target.tool }}
          path: target/${{ matrix.target.tool }}/debug/atri_qq

      - name: Upload exe
        if: env.windows == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: atri_qq-${{ matrix.target.tool }}.exe
          path: target/${{ matrix.target.tool }}/debug/atri_qq.exe


  build:
    strategy:
      fail-fast: false
      matrix:
        target:
          - { name: Linux-aarch64, os: ubuntu-latest, tool: aarch64-unknown-linux-musl }
          - { name: Linux-mips64, os: ubuntu-latest, tool: mips64-unknown-linux-muslabi64 }
          - { name: Linux-powerpc64, os: ubuntu-latest, tool: powerpc64-unknown-linux-gnu }
          - { name: macOS-aarch64, os: macos-latest, tool: aarch64-apple-darwin }
          - { name: iOS-aarch64, os: macos-latest, tool: aarch64-apple-ios }
          - { name: Windows-aarch64, os: windows-latest, tool: aarch64-pc-windows-msvc }

        version: [ nightly ]

    name: Build-${{ matrix.target.name }}
    needs: [ test-and-build ]
    runs-on: ${{ matrix.target.os }}

    env:
      CI: 1
      CARGO_INCREMENTAL: 0
      windows: ${{ startsWith(matrix.target.name, 'Windows') }}
      linux: ${{ startsWith(matrix.target.name, 'Linux') }}

    steps:
      - uses: actions/checkout@v3

      - name: Apt update
        if: ${{ startsWith(matrix.target.os, 'ubuntu') }}
        run: sudo apt update

      - if: ${{ endsWith(matrix.target.tool, 'musl') }}
        run: sudo apt install -y musl-tools musl-dev

      - if: ${{ startsWith(matrix.target.tool, 'aarch64') && env.linux == 'true' }}
        run: sudo apt install -y gcc-aarch64-linux-gnu

      - if: ${{ startsWith(matrix.target.tool, 'mips64') && env.linux == 'true' }}
        run: sudo apt install -y gcc-mips64-linux-gnuabi64

      - if: ${{ startsWith(matrix.target.tool, 'powerpc64') && env.linux == 'true' }}
        run: sudo apt install -y gcc-powerpc64-linux-gnu

      - name: Install rust toolchain
        run: |
          rustup default ${{ matrix.version }}
          rustup target add ${{ matrix.target.tool }}

      - name: Build
        run: cargo build --target ${{ matrix.target.tool }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc
          CARGO_TARGET_MIPS64_UNKNOWN_LINUX_MUSLABI64_LINKER: mips64-linux-gnuabi64-gcc
          CARGO_TARGET_POWERPC64_UNKNOWN_LINUX_GNU_LINKER: powerpc64-linux-gnu-gcc

      #- if: matrix.target.tool != 'x86_64-pc-windows-msvc'
      #  run: |
      #    mkdir artifact
      #    mv target/${{ matrix.target.tool }}/debug/atri_qq artifact/atri_qq-${{ matrix.taget.tool }}

      - name: Upload
        if: env.windows != 'true'
        uses: actions/upload-artifact@v3
        with:
          name: atri_qq-${{ matrix.target.tool }}
          path: target/${{ matrix.target.tool }}/debug/atri_qq

      #- if: matrix.target.tool == 'x86_64-pc-windows-msvc'
      #  run: |
      #    mkdir artifact
      #    mv target/${{ matrix.target.tool }}/debug/atri_qq.exe artifact/atri_qq-${{ matrix.taget.tool }}.exe

      - name: Upload exe
        if: env.windows == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: atri_qq-${{ matrix.target.tool }}.exe
          path: target/${{ matrix.target.tool }}/debug/atri_qq.exe


  build-android:
    name: Android
    needs: [ test-and-build ]
    runs-on: ubuntu-latest

    env:
      CI: 1
      CARGO_INCREMENTAL: 0

    steps:
      - uses: actions/checkout@v3

      - name: Install rust toolchain
        run: |
          rustup default nightly
          rustup target add x86_64-linux-android
          rustup target add aarch64-linux-android

      - name: Install NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25

      - name: Set Android NDK ToolChains Path
        run: |
          echo "ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin >> $GITHUB_PATH

      - name: Set libgcc
        run: |
          cat << EOF > ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/14.0.6/lib/linux/aarch64/libgcc.a
          INPUT(-lunwind)
          EOF
          cat << EOF > ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/14.0.6/lib/linux/x86_64/libgcc.a
          INPUT(-lunwind)
          EOF

      - name: Build Android X64
        run: cargo build --target x86_64-linux-android
        env:
          CC_X86_64_LINUX_ANDROID: x86_64-linux-android26-clang
          CXX_X86_64_LINUX_ANDROID: x86_64-linux-android26-clang++
          CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER: x86_64-linux-android26-clang

      - name: Build Android ARM64
        run: cargo build --target aarch64-linux-android
        env:
          CC_AARCH64_LINUX_ANDROID: aarch64-linux-android26-clang
          CXX_AARCH64_LINUX_ANDROID: aarch64-linux-android26-clang++
          CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER: aarch64-linux-android26-clang

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: atri_qq-aarch64-linux-android
          path: target/aarch64-linux-android/debug/atri_qq

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: atri_qq-x86_64-linux-android
          path: target/x86_64-linux-android/debug/atri_qq